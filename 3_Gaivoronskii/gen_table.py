ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
MIN_KEY_LEN = 8
MAX_KEY_LEN = 9


def print_table(table: list) -> None:
    """
    Print a table that generated by key.
    :param table: list with 2 dimensions
    :return:
    """
    first_str = '4, 5, 6, 7, 8, 9 '
    second_str = '2, 3 '.rjust(len(first_str))
    third_str = '1 '.rjust(len(first_str))
    table_str_0 = '1 2 3 4 5 6 7 8 9'
    table_str_0 = table_str_0.rjust(len(first_str) + len(table_str_0))
    print(table_str_0)
    print(first_str + ' '.join(table[0]))
    print(second_str + ' '.join(table[1]))
    print(third_str + ' '.join(table[2]))


def gen_table(key=None) -> list:
    """
    Generate table for the "Dora" cipher. If key is None, script inputs the key.
    Otherwise script waits for correct key.
    :param key: 8 or 9 letters word in uppercase without repetitions
    :return: list with 2 dimensions
    """
    if key is None:
        while True:
            try:
                key = input(f'Введите ключ (от {MIN_KEY_LEN} до {MAX_KEY_LEN} символов): ')
                key = key.upper()
                for ch in key:
                    if ch not in ALPHABET:
                        raise Exception(f'Ключ может содержать только буквы латинского алфавита')
                    if key.count(ch) > 1:
                        raise Exception(f'Символы в ключе не должны повторяться')
                if len(key) < MIN_KEY_LEN:
                    raise Exception(f'Длина ключа должна быть больше либо равна {MIN_KEY_LEN} символам')
                if len(key) > MAX_KEY_LEN:
                    print(f'ВНИМАНИЕ! Превышено максимальное кол-во символов в ключе, поэтому он будет обрезан')
                    key = key[:MAX_KEY_LEN]
                break
            except Exception as e:
                print(f'Ошибка: {e}')
        with open("key.txt", "w") as file:
            file.write(key)
        print('Ключ сохранён в key.txt')
    print(f'Ключ: {key}')

    table = []

    # First line contains only a key
    table_str1 = []
    for ch in key:
        table_str1.append(ch)
    table.append(table_str1)

    # Other letters put into 2 and 3 lines
    table_str2 = []
    table_str3 = []
    i = 1
    for ch in ALPHABET:
        if ch not in key:
            if i <= 9:
                table_str2.append(ch)
            else:
                table_str3.append(ch)
            i = i + 1
    table.append(table_str2)
    table.append(table_str3)

    print_table(table)

    return table


if __name__ == '__main__':
    gen_table()
