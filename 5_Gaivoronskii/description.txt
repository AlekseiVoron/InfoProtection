Алгоритм CRC строится на основе так называемой CRC-арифметики (двоичной арифметики
без учёта переносов, или полиномиальной арифметики по модулю 2). Так, например, сложение
двух чисел в таких условиях будет выглядеть как обычное сложение по модулю 2, за исключением
отсутствия переносов между разрядами:

 10011010
+ 1010011
 --------
 11001001

При этом вычитание будет производится аналогично и иметь тот же результат.

Таким образом, сложение, как и вычитание, производится следующим образом:
0+0=0   0-0=0
0+1=1   0-1=1
1+0=1   1-0=1
1+1=0   1-1=0
что аналогично операции XOR.

Умножение считается суммой значений первого сомножителя, сдвинутых в соответствии со значением
второго сомножителя:

    1001
   x1010
    ----
    0000
   1001
  0000
 1001
 -------
 1011010

Число А больше числа Б, если позиция самого старшего единичного бита числа А более значима
(или соответствует) позиции самого старшего единичного бита числа Б.
Таким образом, деление выглядит так:

 101101010100000|10001111101
-               ------
 10111          |10111
 -----
     11010
    -10111
     -----
      11011
     -10111
      -----
       11000
      -10111
       -----
        11110
       -10111
        -----
         10010
        -10111
         -----
           10100
          -10111
           -----
              11

Исходя из всего сказанного, деление выше можно заменить поочерёдным применением операции
XOR числел 101101010100000 и 10111 с некоторым сдвигом, т.е. представить деление так:
берём первые 5 цифр делимого (5 - т.к. делитель состоит из 5-ти разрядов):
10110. Это число больше делителя 10111 (см. правило выше, позиции старших единичных битов
обоих чисел совпадают). Производим операцию вычитание по аналогии с делением "столбиком" в
обычной арифметике (в CRC-арифметике аналогично операции XOR):
 10110
-10111
 -----
     1

Результат операции = 1. По аналогии с классическим делением записываем в частное 1
(в CRC алгоритме частное не используется), "добавляем" к результату вычитания следующую
цифру из делимого и пытаемся выполнить вычитание снова.
Т.к. следующая цифра 1 и очередное число, над которым требуется выполнить вычитание меньше
делителя (11 < 10111), берём из делимого ещё одну цифру, записывая в частное 0.
Данные действия продолжаются до тех пор, пока не будут "использованы" все разряды делимого.

Таким образом, деление выше можно представить как вычитание (или XOR, что равноценно в данной
арифметике) числа 10111 из делимого с некими сдвигами относительно самого старшего разряда делимого.

Чтобы сделать этот алгоритм удобным для представления в формальном виде, введём понятие регистра.
Регистром будем называть набор условных "ячеек", внутри которых может находится по одной цифре (1 или 0).
Разрядность регистра (кол-во "ячеек") равна <разрядность_делителя> - 1 (в нашем случае 4).
Делитель при этом будем использовать без старшего разряда, т.е. (1)0111.

Используя регистр, деление можно представить следующим образом:
1. регистр заполнен нулями:                                          0000
2. в младший разряд регистра вносится очередной бит из делимого,
начиная с самого старшего разряда. При этом происходит "сдвиг"
влево всего регистра, и из старшего разряда регистра "вытесняет-
ся" бит (число в скобках):                                        (0)0001
3. повторяем операцию до тех пор, пока очередной "вытесненный"
бит не будет равен единице:                                       (0)0010
                                                                  (0)0101
                                                                  (0)1011
                                                                  (1)0110
4. число 10110 больше, чем 10111 (делитель), а значит, можно про-
извести вычитание (XOR). Но в старшем разряде всегда будет незна-
чащий 0 (1-1=0), а значит, можно использовать лишь биты в регист-
ре и делитель без старшего разряда (0111):                           0110
                                                                    -0111
                                                                     ----
                                                                     0001
5. после вычитания в регистре остаётся число 1, что совпадает с
тем, что было получено в результате деления "столбиком":
 10110
-10111
 -----
     1

6. продолжаем сдвиги и заполнение регистра...

Выполняя эти действия до тех пор, пока в делимом будут оставаться биты,
не использованные в регистре, мы получим регистр, содержащий биты 0011,
что будет совпадать с остатком от деления, произведённым выше.

Если заменить делимое на сообщение, а делитель - на полином (фиксированное
двоичное значение, делитель без старшего разряда), то действия выше описывают работу
алгоритма CRC. В программной реализации алгоритма также имеет смысл дополнение исходного
сообщения нулями в количестве, равном степени полинома (т.е. разрядности регистра).
Это действие позволяет алгоритму корректно работать на сообщениях длиной меньше полинома.

При описании алгоритма CRC используется понятие "полином" - фиксированное двоичное значение, обычно
жёстко заданное в программе и зависящее от реализации алгоритма. Полином в CRC - это двоичное
представление коэффициентов некоего полинома. Например:
x^4 + x^2 + x^1 + 1
имеет коэффициенты 1,0,1,1,1 и может быть записан как 10111.
Степень x при старшем единичном коэффициенте - степень полинома.
Но в алгоритме, как показано выше, старший коэффициент (старший бит) полинома не используется,
поэтому на практике, используя понятие "полином", имеют в виду двоичное число без старшего
разряда - 0111. В алгоритме ниже использовано именно такое значение понятия полином.

Можно составить формальный алгоритм (вход: сообщение, полином N-й степени):
0. Сообщение дополняется N нулями справа.
1. Создаётся регистр из N разрядов, заполненный нулями.
2. Производится сдвиг регистра влево. При этом в младший разряд записывается очередной бит сообщения,
   а старший бит - "выдвигается" из регистра. При этом записанный в регистр бит помечается обработанным.
3. Если "выдвинутый" из регистра бит был равен 1 - производится операция XOR над регистром и полиномом.
   Результат записывается в регистр.
4. Если остались необработанные биты в сообщении - к шагу 2., иначе - в регистре записана контрольная сумма.

Пример:
Вход:
    Сообщение: 10110101010
    Полином: 0111        (4-й степени)
Сообщение, дополненное 4-мя нулями справа: 101101010100000

    Сообщение               Регистр
    101101010100000         0000
     01101010100000      (0)0001
      1101010100000      (0)0010
       101010100000      (0)0101
        01010100000      (0)1011
         1010100000      (1)0110    XOR
         1010100000         0001
          010100000      (0)0011
           10100000      (0)0110
            0100000      (0)1101
             100000      (1)1010    XOR
             100000         1101
              00000      (1)1011    XOR
              00000         1100
               0000      (1)1000    XOR
               0000         1111
                000      (1)1110    XOR
                000         1001
                 00      (1)0010    XOR
                 00         0101
                  0      (0)1010
                         (1)0100    XOR
                            0011
Выход: 0011 (контрольная сумма)


На основе данного алгоритма приведена реализация алгоритма CRC-32, приведенная в этой программе:

Считывание сообщения программой в массив
Инициализация регистра нулевыми битами
Дополнить сообщение 32-мя нулями справа
While (есть необработанные биты в сообщении)
    Сдвиг регистра на 1 бит влево с помещением очередного бита сообщения
        в младший разряд регистра
    Удаление из массива с сообщением бита, помещённого в регистр
    If (сдвинутый из регистра бит == 1)
        Регистр = Регистр XOR Полином
Output = Регистр

Полином задаётся в программе константой.
Результат представляется в двоичном и десятичном видах.
